all_combinations[[length(all_combinations)+1]] <<- list(prev_values)
combi_values <<- c(combi_values, sum(coefficients))
}
} else {
# we still have more variables to account for
max_value <- amount_cards - sum(prev_values)
if(length(prev_values) == amount_money_types-1) {
start_value <- max_value
} else {
start_value <- 0
}
for( i in start_value:max_value ) {
recursive_simulation(c(prev_values, i))
}
}
}
# Start recursive loop through all combinations
recursive_simulation(c())
best_option <- which.max(combi_values)
print(all_combinations[[best_option]])
print(max(combi_values))
amount_cards <- 7
money_types <- c(1, 2, 5, 10, 20, 50)
# test_value <- amount_cards * 0.5 * tail(money_types, n = 1)
test_value <- 12
maximum_required <- 200
amount_money_types <- length(money_types)
all_combinations <- list()
combi_values <- c()
recursive_simulation <- function(prev_values) {
if(length(prev_values) == amount_money_types) {
# we've reached the bottom of our combination chain, calculate stuff!
# this emulates multiplying power series, while trying to be smart and efficient
# I think I failed.
powers <- c()
check_numbers <- 1:test_value
coefficients <- rep(0, test_value)
# for every different monetary value
for( i in 1:amount_money_types) {
if(prev_values[i] == 0) {
next
}
# calculate all possibilities
for( j in 1:prev_values[i]) {
temp_powers <- c()
new_value <- j*money_types[i]
# add them to every previous possibility
if(length(powers) <= prev_values[i]) {
# if it's the first power series we're looking at, simply insert values
powers <- c(powers, new_value)
# automatically cross off numbers we need
if(new_value <= test_value && new_value > 0) {
coefficients[new_value] <- coefficients[new_value] + 1
check_numbers[new_value] <- -1
}
} else {
# if it's not the first power series, add to all previous values
for( k in 1:length(powers)) {
final_new_value <- (powers[k] + new_value)
# automatically cross off numbers we need
if(final_new_value <= test_value) {
coefficients[new_value] <- coefficients[new_value] + 1
check_numbers[final_new_value] <- -1
}
temp_powers <- c(temp_powers, final_new_value)
}
}
powers <- c(powers, temp_powers)
powers <- unique(powers)
}
}
# check if we're able to create all numbers up to the test value
# and if we're able to reach the maximum required value
if(sum(check_numbers) == -1 * test_value && (prev_values %*% money_types)[,] >= maximum_required) {
all_combinations[[length(all_combinations)+1]] <<- list(prev_values)
combi_values <<- c(combi_values, sum(coefficients))
}
} else {
# we still have more variables to account for
max_value <- amount_cards - sum(prev_values)
if(length(prev_values) == amount_money_types-1) {
start_value <- max_value
} else {
start_value <- 0
}
for( i in start_value:max_value ) {
recursive_simulation(c(prev_values, i))
}
}
}
# Start recursive loop through all combinations
recursive_simulation(c())
best_option <- which.max(combi_values)
print(all_combinations[[best_option]])
print(max(combi_values))
amount_cards <- 7
money_types <- c(1, 2, 5, 10, 20, 50, 100)
# test_value <- amount_cards * 0.5 * tail(money_types, n = 1)
test_value <- 12
maximum_required <- 200
amount_money_types <- length(money_types)
all_combinations <- list()
combi_values <- c()
recursive_simulation <- function(prev_values) {
if(length(prev_values) == amount_money_types) {
# we've reached the bottom of our combination chain, calculate stuff!
# this emulates multiplying power series, while trying to be smart and efficient
# I think I failed.
powers <- c()
check_numbers <- 1:test_value
coefficients <- rep(0, test_value)
# for every different monetary value
for( i in 1:amount_money_types) {
if(prev_values[i] == 0) {
next
}
# calculate all possibilities
for( j in 1:prev_values[i]) {
temp_powers <- c()
new_value <- j*money_types[i]
# add them to every previous possibility
if(length(powers) <= prev_values[i]) {
# if it's the first power series we're looking at, simply insert values
powers <- c(powers, new_value)
# automatically cross off numbers we need
if(new_value <= test_value && new_value > 0) {
coefficients[new_value] <- coefficients[new_value] + 1
check_numbers[new_value] <- -1
}
} else {
# if it's not the first power series, add to all previous values
for( k in 1:length(powers)) {
final_new_value <- (powers[k] + new_value)
# automatically cross off numbers we need
if(final_new_value <= test_value) {
coefficients[new_value] <- coefficients[new_value] + 1
check_numbers[final_new_value] <- -1
}
temp_powers <- c(temp_powers, final_new_value)
}
}
powers <- c(powers, temp_powers)
powers <- unique(powers)
}
}
# check if we're able to create all numbers up to the test value
# and if we're able to reach the maximum required value
if(sum(check_numbers) == -1 * test_value && (prev_values %*% money_types)[,] >= maximum_required) {
all_combinations[[length(all_combinations)+1]] <<- list(prev_values)
combi_values <<- c(combi_values, sum(coefficients))
}
} else {
# we still have more variables to account for
max_value <- amount_cards - sum(prev_values)
if(length(prev_values) == amount_money_types-1) {
start_value <- max_value
} else {
start_value <- 0
}
for( i in start_value:max_value ) {
recursive_simulation(c(prev_values, i))
}
}
}
# Start recursive loop through all combinations
recursive_simulation(c())
best_option <- which.max(combi_values)
print(all_combinations[[best_option]])
print(max(combi_values))
amount_cards <- 7
money_types <- c(1, 2, 5, 10, 20, 50, 100)
# test_value <- amount_cards * 0.5 * tail(money_types, n = 1)
test_value <- 12
maximum_required <- 200
amount_money_types <- length(money_types)
all_combinations <- list()
combi_values <- c()
recursive_simulation <- function(prev_values) {
if(length(prev_values) == amount_money_types) {
# we've reached the bottom of our combination chain, calculate stuff!
# this emulates multiplying power series, while trying to be smart and efficient
# I think I failed.
powers <- c()
check_numbers <- 1:test_value
coefficients <- rep(0, test_value)
# for every different monetary value
for( i in 1:amount_money_types) {
if(prev_values[i] == 0) {
next
}
# calculate all possibilities
for( j in 1:prev_values[i]) {
temp_powers <- c()
new_value <- j*money_types[i]
# add them to every previous possibility
if(length(powers) <= prev_values[i]) {
# if it's the first power series we're looking at, simply insert values
powers <- c(powers, new_value)
# automatically cross off numbers we need
if(new_value <= test_value && new_value > 0) {
coefficients[new_value] <- coefficients[new_value] + 1
check_numbers[new_value] <- -1
}
} else {
# if it's not the first power series, add to all previous values
for( k in 1:length(powers)) {
final_new_value <- (powers[k] + new_value)
# automatically cross off numbers we need
if(final_new_value <= test_value) {
coefficients[new_value] <- coefficients[new_value] + 1
check_numbers[final_new_value] <- -1
}
temp_powers <- c(temp_powers, final_new_value)
}
}
powers <- c(powers, temp_powers)
powers <- unique(powers)
}
}
# check if we're able to create all numbers up to the test value
# and if we're able to reach the maximum required value
if(sum(check_numbers) == -1 * test_value && (prev_values %*% money_types)[,] >= maximum_required) {
all_combinations[[length(all_combinations)+1]] <<- list(prev_values)
combi_values <<- c(combi_values, sum(coefficients))
}
} else {
# we still have more variables to account for
max_value <- amount_cards - sum(prev_values)
if(length(prev_values) == amount_money_types-1) {
start_value <- max_value
} else {
start_value <- 0
}
for( i in start_value:max_value ) {
recursive_simulation(c(prev_values, i))
}
}
}
# Start recursive loop through all combinations
recursive_simulation(c())
best_option <- which.max(combi_values)
print(all_combinations[[best_option]])
print(max(combi_values))
amount_cards <- 14
money_types <- c(1, 2, 5, 10, 20, 100)
# test_value <- amount_cards * 0.5 * tail(money_types, n = 1)
test_value <- 24
maximum_required <- 400
amount_money_types <- length(money_types)
all_combinations <- list()
combi_values <- c()
recursive_simulation <- function(prev_values) {
if(length(prev_values) == amount_money_types) {
# we've reached the bottom of our combination chain, calculate stuff!
# this emulates multiplying power series, while trying to be smart and efficient
# I think I failed.
powers <- c()
check_numbers <- 1:test_value
coefficients <- rep(0, test_value)
# for every different monetary value
for( i in 1:amount_money_types) {
if(prev_values[i] == 0) {
next
}
# calculate all possibilities
for( j in 1:prev_values[i]) {
temp_powers <- c()
new_value <- j*money_types[i]
# add them to every previous possibility
if(length(powers) <= prev_values[i]) {
# if it's the first power series we're looking at, simply insert values
powers <- c(powers, new_value)
# automatically cross off numbers we need
if(new_value <= test_value && new_value > 0) {
coefficients[new_value] <- coefficients[new_value] + 1
check_numbers[new_value] <- -1
}
} else {
# if it's not the first power series, add to all previous values
for( k in 1:length(powers)) {
final_new_value <- (powers[k] + new_value)
# automatically cross off numbers we need
if(final_new_value <= test_value) {
coefficients[new_value] <- coefficients[new_value] + 1
check_numbers[final_new_value] <- -1
}
temp_powers <- c(temp_powers, final_new_value)
}
}
powers <- c(powers, temp_powers)
powers <- unique(powers)
}
}
# check if we're able to create all numbers up to the test value
# and if we're able to reach the maximum required value
if(sum(check_numbers) == -1 * test_value && (prev_values %*% money_types)[,] >= maximum_required) {
all_combinations[[length(all_combinations)+1]] <<- list(prev_values)
combi_values <<- c(combi_values, sum(coefficients))
}
} else {
# we still have more variables to account for
max_value <- amount_cards - sum(prev_values)
if(length(prev_values) == amount_money_types-1) {
start_value <- max_value
} else {
start_value <- 0
}
for( i in start_value:max_value ) {
recursive_simulation(c(prev_values, i))
}
}
}
# Start recursive loop through all combinations
recursive_simulation(c())
best_option <- which.max(combi_values)
print(all_combinations[[best_option]])
print(max(combi_values))
simulateLindley <- function(lambda, mu, n) {
waitingTimes <- rep(0, n)
w <- 0
a <- 0
b <- 0
for(i in 1:n) {
w <- max(w + b - a, 0)
waitingTimes[i] <- w
a <- rexp(1, lambda)
b <- rexp(1, lambda)
}
return(waitingTimes)
}
simulateLindley(0.8, 1, 100)
dist <- c(0.11, 0.16, 0.17, 0.15, 0.12, 0.09, 0.07, 0.05, 0.03, 0.02, 0.02, 0.01, 0.01)
hist(dist)
plot(dist)
dist <- c(0.11, 0.16, 0.17, 0.15, 0.12, 0.09, 0.07, 0.05, 0.03, 0.02, 0.02, 0.01, 0.01)
plot(dist)
lines(dist)
dist <- c(0.11, 0.16, 0.17, 0.15, 0.12, 0.09, 0.07, 0.05, 0.03, 0.02, 0.02, 0.01, 0.01)
plot(dist, ylab = "probability", xlab = "queue length")
lines(dist)
setwd("~/NDHU/Risk Simulation")
require(rgdal)
require(ggplot2)
require(rgeos)
listOfNames <- c("Alaska", "Northwest Territory", "Alberta", "Ontario", "Quebec", "Western United States", "Eastern United States", "Central America", "Greenland", "Venezuela", "Peru", "Brazil", "Argentina", "North Africa", "Congo", "South Africa", "Madagascar", "East Africa", "Egypt", "Western Europe", "Southern Europe", "Northern Europe", "Great Britain", "Iceland", "Scandinavia", "Russia", "Middle East", "Afghanistan", "Ural", "Siberia", "Yakutsk", "Kamchatka", "Irkutsk", "Mongolia", "Japan", "China", "India", "Siam", "Indonesia", "New Guinea", "Western Australia", "Eastern Australia")
source("simulationResults.R")
# Read SHAPEFILE.shp from the current working directory (".")
map <- readOGR(dsn = ".", layer = "Areas")
centroids.df <- as.data.frame(coordinates(map))
names(centroids.df) <- c("long", "lat")
true_centroids <- gCentroid(map,byid=TRUE)
for(i in 1:length(results)) {
data <- data.frame(Name = listOfNames,
R = results[[i]],
A = armies[[i]])
data$player = with(data, R)
data$armies = with(data, A)
map.data <- data.frame(id = rownames(map@data), Name = map@data$Name)
map.data <- merge(map.data,data)
map.df   <- fortify(map)
map.df   <- merge(map.df,map.data)
map.data_copy <- map.data
names_correct_order <- map.data_copy$armies[order(as.numeric(as.character(map.data_copy$id)), decreasing = FALSE)]
names_correct_order <- 20 / max(names_correct_order) * names_correct_order
world.label <- data.frame(
name <- names_correct_order,
coordinates(map)
)
temp_plot <- ggplot(map.df,aes(x = long,y = lat,group = group))+
geom_polygon(aes(fill=player),color="grey20")+labs(x=paste("Turn ", i), y="")+
scale_fill_gradientn(colours=c("lightgreen", "#FF2222", "#2222FF", "yellow", "orange", "#22AAFF"), limits=c(0,amount_players-1), breaks = 0:(amount_players-1), guide = "legend")+
geom_point(data = world.label, aes(X1, X2, group = 0), size = name, col = "#444444")+
geom_text(aes(x = 80, y = 0, label = paste("Strategies used: ", strategies_used, sep = "")))+
theme(legend.spacing.y = unit(20, "mm"))
# geom_text(aes(X1, X2, label = name, group = 0), data = world.label)
temp_plot
ggsave(plot = temp_plot, filename = paste("Plots/plot_turn_", formatC(i, width = 3, flag = "0"), ".png", sep = ""), device = png, width= 1200, height = 675, limitsize = FALSE)
}
# display end results, over the end situation on the board
for(i in length(results):(length(results)+10)) {
temp_plot <- temp_plot <- ggplot(map.df,aes(x = long,y = lat,group = group))+
geom_polygon(aes(fill=player, alpha = 0.5),color="grey20")+labs(x="Last Turn", y="")+
scale_fill_gradientn(colours=c("lightgreen", "#FF2222", "#2222FF", "yellow", "orange", "#22AAFF"), limits=c(0,amount_players-1), breaks = 0:(amount_players-1), guide = "legend")+
geom_point(data = world.label, aes(X1, X2, group = 0), size = name, col = "#444444")+
geom_text(aes(x = 50, y = 0, label = paste(winner, " WINS!")))+
geom_text(aes(x = 80, y = -30, label = paste("Mission: ", mission)))+
theme(legend.spacing.y = unit(20, "mm"))
ggsave(plot = temp_plot, filename = paste("Plots/plot_turn_", formatC(i+1, width = 3, flag = "0"), ".png", sep = ""), device = png, width= 1200, height = 675, limitsize = FALSE)
}
# FOR CREATING VIDEO:
# Open cmd line
# Navigate to directory with plots
# Execute this ffmpeg -framerate 18 -i plot_turn_%03d.png output.mp4
# dev.print(file = paste("Plots/plot_turn_", i, ".png", sep = ""), device=png, width=800)
#geom_text(aes(label = Name, x = long, y = lat))
# scale_fill_manual(values = c("green", "red", "blue", "yellow", "orange", "purple"), breaks = c(0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5))
# scale_fill_gradient2(low="red",high="blue",mid="white",limits=c(0, 4))
# scale_fill_gradient2(low="red",high="blue",mid="white",limits=c(0, 4))
require(rgdal)
require(ggplot2)
require(rgeos)
listOfNames <- c("Alaska", "Northwest Territory", "Alberta", "Ontario", "Quebec", "Western United States", "Eastern United States", "Central America", "Greenland", "Venezuela", "Peru", "Brazil", "Argentina", "North Africa", "Congo", "South Africa", "Madagascar", "East Africa", "Egypt", "Western Europe", "Southern Europe", "Northern Europe", "Great Britain", "Iceland", "Scandinavia", "Russia", "Middle East", "Afghanistan", "Ural", "Siberia", "Yakutsk", "Kamchatka", "Irkutsk", "Mongolia", "Japan", "China", "India", "Siam", "Indonesia", "New Guinea", "Western Australia", "Eastern Australia")
source("simulationResults.R")
# Read SHAPEFILE.shp from the current working directory (".")
map <- readOGR(dsn = ".", layer = "Areas")
centroids.df <- as.data.frame(coordinates(map))
names(centroids.df) <- c("long", "lat")
true_centroids <- gCentroid(map,byid=TRUE)
for(i in 1:length(results)) {
data <- data.frame(Name = listOfNames,
R = results[[i]],
A = armies[[i]])
data$player = with(data, R)
data$armies = with(data, A)
map.data <- data.frame(id = rownames(map@data), Name = map@data$Name)
map.data <- merge(map.data,data)
map.df   <- fortify(map)
map.df   <- merge(map.df,map.data)
map.data_copy <- map.data
names_correct_order <- map.data_copy$armies[order(as.numeric(as.character(map.data_copy$id)), decreasing = FALSE)]
names_correct_order <- 20 / max(names_correct_order) * names_correct_order
world.label <- data.frame(
name <- names_correct_order,
coordinates(map)
)
temp_plot <- ggplot(map.df,aes(x = long,y = lat,group = group))+
geom_polygon(aes(fill=player),color="grey20")+labs(x=paste("Turn ", i), y="")+
scale_fill_gradientn(colours=c("lightgreen", "#FF2222", "#2222FF", "yellow", "orange", "#22AAFF"), limits=c(0,amount_players-1), breaks = 0:(amount_players-1), guide = "legend")+
geom_point(data = world.label, aes(X1, X2, group = 0), size = name, col = "#444444")+
geom_text(aes(x = 80, y = 0, label = paste("Strategies used: ", strategies_used, sep = "")))+
theme(legend.spacing.y = unit(20, "mm"))
# geom_text(aes(X1, X2, label = name, group = 0), data = world.label)
temp_plot
ggsave(plot = temp_plot, filename = paste("Plots/plot_turn_", formatC(i, width = 3, flag = "0"), ".png", sep = ""), device = png, width= 1200, height = 675, limitsize = FALSE)
}
# display end results, over the end situation on the board
for(i in length(results):(length(results)+10)) {
temp_plot <- temp_plot <- ggplot(map.df,aes(x = long,y = lat,group = group))+
geom_polygon(aes(fill=player, alpha = 0.5),color="grey20")+labs(x="Last Turn", y="")+
scale_fill_gradientn(colours=c("lightgreen", "#FF2222", "#2222FF", "yellow", "orange", "#22AAFF"), limits=c(0,amount_players-1), breaks = 0:(amount_players-1), guide = "legend")+
geom_point(data = world.label, aes(X1, X2, group = 0), size = name, col = "#444444")+
geom_text(aes(x = 50, y = 0, label = paste(winner, " WINS!")))+
geom_text(aes(x = 80, y = -30, label = paste("Mission: ", mission)))+
theme(legend.spacing.y = unit(20, "mm"))
ggsave(plot = temp_plot, filename = paste("Plots/plot_turn_", formatC(i+1, width = 3, flag = "0"), ".png", sep = ""), device = png, width= 1200, height = 675, limitsize = FALSE)
}
# FOR CREATING VIDEO:
# Open cmd line
# Navigate to directory with plots
# Execute this ffmpeg -framerate 18 -i plot_turn_%03d.png output.mp4
# dev.print(file = paste("Plots/plot_turn_", i, ".png", sep = ""), device=png, width=800)
#geom_text(aes(label = Name, x = long, y = lat))
# scale_fill_manual(values = c("green", "red", "blue", "yellow", "orange", "purple"), breaks = c(0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5))
# scale_fill_gradient2(low="red",high="blue",mid="white",limits=c(0, 4))
# scale_fill_gradient2(low="red",high="blue",mid="white",limits=c(0, 4))
require(rgdal)
require(ggplot2)
require(rgeos)
listOfNames <- c("Alaska", "Northwest Territory", "Alberta", "Ontario", "Quebec", "Western United States", "Eastern United States", "Central America", "Greenland", "Venezuela", "Peru", "Brazil", "Argentina", "North Africa", "Congo", "South Africa", "Madagascar", "East Africa", "Egypt", "Western Europe", "Southern Europe", "Northern Europe", "Great Britain", "Iceland", "Scandinavia", "Russia", "Middle East", "Afghanistan", "Ural", "Siberia", "Yakutsk", "Kamchatka", "Irkutsk", "Mongolia", "Japan", "China", "India", "Siam", "Indonesia", "New Guinea", "Western Australia", "Eastern Australia")
source("simulationResults.R")
# Read SHAPEFILE.shp from the current working directory (".")
map <- readOGR(dsn = ".", layer = "Areas")
centroids.df <- as.data.frame(coordinates(map))
names(centroids.df) <- c("long", "lat")
true_centroids <- gCentroid(map,byid=TRUE)
for(i in 1:length(results)) {
data <- data.frame(Name = listOfNames,
R = results[[i]],
A = armies[[i]])
data$player = with(data, R)
data$armies = with(data, A)
map.data <- data.frame(id = rownames(map@data), Name = map@data$Name)
map.data <- merge(map.data,data)
map.df   <- fortify(map)
map.df   <- merge(map.df,map.data)
map.data_copy <- map.data
names_correct_order <- map.data_copy$armies[order(as.numeric(as.character(map.data_copy$id)), decreasing = FALSE)]
names_correct_order <- 20 / max(names_correct_order) * names_correct_order
world.label <- data.frame(
name <- names_correct_order,
coordinates(map)
)
temp_plot <- ggplot(map.df,aes(x = long,y = lat,group = group))+
geom_polygon(aes(fill=player),color="grey20")+labs(x=paste("Turn ", i), y="")+
scale_fill_gradientn(colours=c("lightgreen", "#FF2222", "#2222FF", "yellow", "orange", "#22AAFF"), limits=c(0,amount_players-1), breaks = 0:(amount_players-1), guide = "legend")+
geom_point(data = world.label, aes(X1, X2, group = 0), size = name, col = "#444444")+
geom_text(aes(x = 80, y = 0, label = paste("Strategies used: ", strategies_used, sep = "")))+
theme(legend.spacing.y = unit(20, "mm"))
# geom_text(aes(X1, X2, label = name, group = 0), data = world.label)
temp_plot
ggsave(plot = temp_plot, filename = paste("Plots/plot_turn_", formatC(i, width = 3, flag = "0"), ".png", sep = ""), device = png, width= 1200, height = 675, limitsize = FALSE)
}
# display end results, over the end situation on the board
for(i in length(results):(length(results)+10)) {
temp_plot <- temp_plot <- ggplot(map.df,aes(x = long,y = lat,group = group))+
geom_polygon(aes(fill=player, alpha = 0.5),color="grey20")+labs(x="Last Turn", y="")+
scale_fill_gradientn(colours=c("lightgreen", "#FF2222", "#2222FF", "yellow", "orange", "#22AAFF"), limits=c(0,amount_players-1), breaks = 0:(amount_players-1), guide = "legend")+
geom_point(data = world.label, aes(X1, X2, group = 0), size = name, col = "#444444")+
geom_text(aes(x = 50, y = 0, label = paste(winner, " WINS!")))+
geom_text(aes(x = 80, y = -30, label = paste("Mission: ", mission)))+
theme(legend.spacing.y = unit(20, "mm"))
ggsave(plot = temp_plot, filename = paste("Plots/plot_turn_", formatC(i+1, width = 3, flag = "0"), ".png", sep = ""), device = png, width= 1200, height = 675, limitsize = FALSE)
}
# FOR CREATING VIDEO:
# Open cmd line
# Navigate to directory with plots
# Execute this ffmpeg -framerate 18 -i plot_turn_%03d.png output.mp4
# dev.print(file = paste("Plots/plot_turn_", i, ".png", sep = ""), device=png, width=800)
#geom_text(aes(label = Name, x = long, y = lat))
# scale_fill_manual(values = c("green", "red", "blue", "yellow", "orange", "purple"), breaks = c(0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5))
# scale_fill_gradient2(low="red",high="blue",mid="white",limits=c(0, 4))
# scale_fill_gradient2(low="red",high="blue",mid="white",limits=c(0, 4))
